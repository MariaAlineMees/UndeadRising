package br.com.pedrodamasceno.controller;

import java.util.ArrayList;
import java.util.List; // NOVO: Para acumular logs do dia
import java.util.Map; // NOVO: Para armazenar resultados de exploração

import javax.swing.JOptionPane;

import br.com.pedrodamasceno.model.ModeloJogo;
import br.com.pedrodamasceno.model.combate.SistemaCombate;
import br.com.pedrodamasceno.model.itens.Arma;
import br.com.pedrodamasceno.model.itens.ArmaDeFogo; // Importar ArmaDeFogo
import br.com.pedrodamasceno.model.itens.Armadura; // Importar Armadura
import br.com.pedrodamasceno.model.itens.Item;
import br.com.pedrodamasceno.model.itens.Mapa; // Importar Mapa
import br.com.pedrodamasceno.model.itens.Municao; // Importar Municao
import br.com.pedrodamasceno.model.locais.SubLocal; // Importar SubLocal
import br.com.pedrodamasceno.model.personagens.Personagem;
import br.com.pedrodamasceno.model.status.EfeitoStatus;
import br.com.pedrodamasceno.model.status.StatusEffect;
import br.com.pedrodamasceno.model.zumbis.Zumbi;
import br.com.pedrodamasceno.model.zumbis.ZumbiAlfa;
import br.com.pedrodamasceno.view.TelaCombate;
import br.com.pedrodamasceno.view.TelaGameOver;
import br.com.pedrodamasceno.view.TelaPrincipal;
import br.com.pedrodamasceno.view.TelaSelecaoPersonagem;

public class ControladorJogo {

    private ModeloJogo modelo;
    private TelaPrincipal telaPrincipal;
    private final List<String> logsDiarios = new ArrayList<>(); // NOVO: Para acumular logs do dia, agora final

    public ControladorJogo() { }

    public ControladorJogo(TelaPrincipal telaPrincipal) {
        this.telaPrincipal = telaPrincipal;
        this.modelo = telaPrincipal.getModelo();
    }

    public void iniciarJogo() {
        TelaSelecaoPersonagem telaSelecao = new TelaSelecaoPersonagem(null);
        telaSelecao.setLocationRelativeTo(null);
        telaSelecao.setVisible(true);

        Personagem personagem = telaSelecao.getPersonagemSelecionado();
        if (personagem != null) {
            modelo = new ModeloJogo();
            modelo.iniciarNovoJogo(personagem);

            if (telaPrincipal == null) {
                telaPrincipal = new TelaPrincipal(modelo);
            } else {
                telaPrincipal.setModelo(modelo);
            }
            this.logsDiarios.clear(); // Limpar logs ao iniciar novo jogo
            this.logsDiarios.add("Início do Dia " + modelo.getDiaAtual() + " - " + modelo.getPeriodoAtual().getRotulo() + ". Local: " + modelo.obterNomeLocalDoDia(modelo.getDiaAtual()));

            telaPrincipal.atualizarInterface();
            telaPrincipal.setLocationRelativeTo(null);
            telaPrincipal.setVisible(true);

            mostrarIntroducao();
        }
    }

    private void mostrarIntroducao() {
        JOptionPane.showMessageDialog(telaPrincipal,
                """
                O mundo foi devastado por um apocalipse zumbi.\n
                Explore MANHÃ, TARDE e NOITE (3 vezes ao dia).\n
                Durma após explorar o período para avançar o tempo.\n
                O botão 'Próximo Dia' só libera após as 3 explorações.
                """,
                "Introdução", JOptionPane.INFORMATION_MESSAGE);
    }

    public void explorar() {
        if (modelo.isEventoFinalAtivo()) {
            iniciarEventoFinalDia7();
            return;
        }
        if (modelo.isEmCombate()) {
            modelo.setMensagem("Você está em combate! Não pode explorar agora.");
            return;
        }

        Map<String, Object> resultadosExploracao = modelo.explorar();

        // Tratar mensagem de status (erros ou estados especiais do modelo)
        if (resultadosExploracao.get("mensagemStatus") != null) {
            modelo.setMensagem((String) resultadosExploracao.get("mensagemStatus"));
            logsDiarios.add((String) resultadosExploracao.get("mensagemStatus"));
            telaPrincipal.atualizarInterface(); // Adicionar para atualizar a tela
            verificarFimJogo(); // Adicionar para verificar o fim do jogo
            return; // Impede processamento adicional se for uma mensagem de erro/estado
        }

        // Tratar seleção de sublocal
        if ((boolean) resultadosExploracao.get("selecaoSubLocalIniciada")) {
            modelo.setMensagem((String) resultadosExploracao.get("mensagem"));
            logsDiarios.add("Você chegou em " + modelo.getLocalAtual().getNome() + ". Escolha uma área para explorar durante a " + modelo.getPeriodoAtual().getRotulo() + ".");
            telaPrincipal.mostrarSelecaoSubLocal();
            telaPrincipal.atualizarInterface();
            return;
        }

        // Tratar encontro de zumbis
        if ((boolean) resultadosExploracao.get("combateIniciado")) {
            String nomeLocalOuSublocal = resultadosExploracao.get("subLocalExplorado") != null ? (String) resultadosExploracao.get("subLocalExplorado") : (String) resultadosExploracao.get("localExplorado");
            String periodo = (String) resultadosExploracao.get("periodo");
            logsDiarios.add("Dia " + modelo.getDiaAtual() + " (" + periodo + ") - Você explorou " + nomeLocalOuSublocal + " e encontrou zumbis! Prepare-se para lutar!");
            iniciarCombate();
            return;
        }

        // Se não iniciou seleção de sublocal nem combate, então é uma exploração direta com item ou nada
        String nomeLocalOuSublocal = resultadosExploracao.get("subLocalExplorado") != null ? (String) resultadosExploracao.get("subLocalExplorado") : (String) resultadosExploracao.get("localExplorado");
        String periodo = (String) resultadosExploracao.get("periodo");
        String mensagemBaseExploracao = "Dia " + modelo.getDiaAtual() + " (" + periodo + ") - Você explorou " + nomeLocalOuSublocal;

        // Tratar item encontrado
        Item itemEncontrado = (Item) resultadosExploracao.get("itemEncontrado");
        if (itemEncontrado != null) {
            String logItem = mensagemBaseExploracao + " e encontrou: " + itemEncontrado.getNome() + "!";
            logsDiarios.add(logItem);
            modelo.setMensagem(logItem);
        } else {
            String logNada = mensagemBaseExploracao + ", mas não encontrou nada útil.";
            logsDiarios.add(logNada);
            modelo.setMensagem(logNada);
        }
        
        telaPrincipal.atualizarInterface();
        verificarFimJogo();
    }

    public void explorarSubLocal(SubLocal subLocal) {
        Map<String, Object> resultadosExploracao = modelo.explorarSubLocal(subLocal);
        // Remove a mensagem de exploração genérica, será substituída por mais detalhada abaixo

        // Tratar mensagem de status (erros ou estados especiais do modelo)
        if (resultadosExploracao.get("mensagemStatus") != null) {
            modelo.setMensagem((String) resultadosExploracao.get("mensagemStatus"));
            logsDiarios.add((String) resultadosExploracao.get("mensagemStatus"));
            telaPrincipal.atualizarInterface(); // Adicionar para atualizar a tela
            verificarFimJogo(); // Adicionar para verificar o fim do jogo
            return; // Impede processamento adicional se for uma mensagem de erro/estado
        }

        // Tratar encontro de zumbis
        if ((boolean) resultadosExploracao.get("combateIniciado")) {
            String nomeSublocal = (String) resultadosExploracao.get("subLocalExplorado");
            String nomeLocal = (String) resultadosExploracao.get("localExplorado");
            String periodo = (String) resultadosExploracao.get("periodo");
            logsDiarios.add("Dia " + modelo.getDiaAtual() + " (" + periodo + ") - Você explorou " + nomeSublocal + " em " + nomeLocal + " e encontrou zumbis! Prepare-se para lutar!");
            iniciarCombate();
            return;
        }

        // Se não iniciou combate, então é uma exploração de sublocal direta com item ou nada
        String nomeSublocal = (String) resultadosExploracao.get("subLocalExplorado");
        String nomeLocal = (String) resultadosExploracao.get("localExplorado");
        String periodo = (String) resultadosExploracao.get("periodo");
        String mensagemBaseExploracao = "Dia " + modelo.getDiaAtual() + " (" + periodo + ") - Você explorou " + nomeSublocal + " em " + nomeLocal;

        // Tratar item encontrado
        Item itemEncontrado = (Item) resultadosExploracao.get("itemEncontrado");
        if (itemEncontrado != null) {
            String logItem = mensagemBaseExploracao + " e encontrou: " + itemEncontrado.getNome() + "!";
            logsDiarios.add(logItem);
            modelo.setMensagem(logItem);
        } else {
            String logNada = mensagemBaseExploracao + ", mas não encontrou nada útil.";
            logsDiarios.add(logNada);
            modelo.setMensagem(logNada);
        }

        // Finalizar exploração (apenas marca o período, avanço de período será no ControladorJogo)

        telaPrincipal.atualizarInterface();
        verificarFimJogo();
    }

    // Novo método para selecionar um local (para dias intermediários)
    public void selecionarLocal(br.com.pedrodamasceno.model.locais.Local local) {
        modelo.setLocalAtual(local);
        String logSelecao = "Dia " + modelo.getDiaAtual() + " (" + modelo.getPeriodoAtual().getRotulo() + ") - Você selecionou o local: " + local.getNome() + ".";
        modelo.setMensagem(logSelecao + " Agora pode explorar este local.");
        logsDiarios.add(logSelecao);
        telaPrincipal.atualizarInterface();
    }

    private void iniciarCombate() {
        System.out.println("DEBUG: ControladorJogo.iniciarCombate - Iniciando combate. Modelo.emCombate antes: " + modelo.isEmCombate());
        // Não é necessário instanciar SistemaCombate aqui, pois TelaCombate já faz isso.
        TelaCombate telaCombate = new TelaCombate(telaPrincipal, modelo, modelo.getInimigosAtuais());
        telaCombate.setLocationRelativeTo(telaPrincipal);
        telaCombate.setVisible(true);
        System.out.println("DEBUG: ControladorJogo.iniciarCombate - Combate iniciado. Modelo.emCombate depois: " + modelo.isEmCombate());
        
        // Não chamar concluirExploracaoPeriodo aqui - será chamado quando o combate terminar
    }

    // NOVO MÉTODO: Processa o avanço de período ou a conclusão de todas as explorações
    
    public void dormir() {
        if (modelo.isEventoFinalAtivo()) {
            mostrarMensagem("Dia 7 - Evento Final: não é possível dormir agora.");
            return;
        }
        if (!modelo.podeDormir()) {
            mostrarMensagem("Você só pode dormir após explorar todos os períodos (Manhã, Tarde, Noite)!");
            return;
        }
        modelo.dormir();
        telaPrincipal.atualizarInterface();

        // Construir resumo do dia anterior usando logsDiarios
        StringBuilder resumo = new StringBuilder();
        resumo.append("Fim do Dia ").append(modelo.getDiaAtual()).append("!\n"); // Dia atual (que acabou de terminar)
        for (String log : logsDiarios) {
            resumo.append(log).append("\n");
        }
        resumo.append("Saúde recuperada: ").append(modelo.getJogador().getSaude() - modelo.getJogador().getSaudeMaxima() / 3).append(" HP.\n"); // Ajuste para mostrar o quanto realmente foi curado
        resumo.append(modelo.gerarMensagemNoite(modelo.getJogador().getSentimento())); // A mensagem da noite já está no modelo
        modelo.setResumoDiaAnterior(resumo.toString()); // Atualiza o resumo no modelo
        logsDiarios.clear(); // Limpar logs para o novo dia

        // NOVO: Mostrar pop-up de alerta de mudança de dia
        
        // Mostrar pop-up com o resumo do dia anterior
        telaPrincipal.mostrarResumoDoDia(modelo.getResumoDiaAnterior());

        verificarFimJogo();
        if (modelo.isEventoFinalAtivo() && !modelo.isEmCombate() && !modelo.isJogoTerminado()) {
            iniciarEventoFinalDia7();
        }
    }

    public void usarItem(Item item) {
        if (item == null || modelo == null) return;

        String mensagem = "Você usou: " + item.getNome();
        Personagem jogador = modelo.getJogador();

        if (item instanceof Arma arma) {
            if (!arma.estaQuebrada() && (arma instanceof ArmaDeFogo ? ((ArmaDeFogo) arma).getMunicao() > 0 : true)) {
                if (jogador.getArmaEquipada() != null) {
                    jogador.getInventario().adicionarItem(jogador.getArmaEquipada()); // Devolve a arma antiga para o inventário
                }
                jogador.equiparArma(arma);
                mensagem = "Você equipou: " + arma.getNome() + " (Dano: " + arma.getDano() + ")";
                jogador.getInventario().removerItem(arma); // Remove a arma do inventário ao equipar
            } else if (arma.estaQuebrada()) {
                mensagem = arma.getNome() + " está quebrada e não pode ser equipada.";
            } else if (arma instanceof ArmaDeFogo && ((ArmaDeFogo) arma).getMunicao() <= 0) {
                mensagem = arma.getNome() + " está sem munição e não pode ser equipada.";
            }
        } else if (item instanceof Armadura armadura) {
            if (!armadura.estaQuebrada()) {
                if (jogador.getArmaduraEquipada() != null) {
                    jogador.getInventario().adicionarItem(jogador.getArmaduraEquipada()); // Devolve a armadura antiga para o inventário
                }
                jogador.equiparArmadura(armadura);
                mensagem = "Você equipou: " + armadura.getNome() + " (Defesa: " + armadura.getDefesa() + ")";
                jogador.getInventario().removerItem(armadura); // Remove a armadura do inventário ao equipar
            } else {
                mensagem = armadura.getNome() + " está quebrada e não pode ser equipada.";
            }
        } else if (item instanceof Municao municao) {
            if (jogador.getArmaEquipada() instanceof ArmaDeFogo armaDeFogo) {
                armaDeFogo.recarregar(municao.getValor());
                mensagem = "Você recarregou o " + armaDeFogo.getNome() + " com " + municao.getValor() + " balas!";
                jogador.getInventario().removerItem(municao); // Remove a munição do inventário após uso
            } else {
                mensagem = "Você não tem uma arma de fogo equipada para usar munição.";
            }
        } else if (item instanceof Mapa) {
            mensagem = item.usar(jogador); // O Mapa apenas exibe uma mensagem informativa
            // Não remove o mapa do inventário
        }
        else {
            switch (item.getTipo().name().toUpperCase()) {
                case "COMIDA":
                    int cura = item.getValor();
                    int saudeAntes = jogador.getSaude();
                    jogador.curar(cura);
                    int saudeDepois = jogador.getSaude();
                    int curado = saudeDepois - saudeAntes;
                    mensagem += " e recuperou " + curado + " de saúde!";
                    break;

                case "MEDICAMENTO":
                    int curaMed = item.getValor();
                    int saudeAntesMed = jogador.getSaude();
                    jogador.curar(curaMed);
                    int saudeDepoisMed = jogador.getSaude();
                    int curadoMed = saudeDepoisMed - saudeAntesMed;
                    mensagem += " e recuperou " + curadoMed + " de saúde!";
                    break;

                case "BUFF":
                    jogador.adicionarEfeito(new StatusEffect(EfeitoStatus.FORCA, 3, 2));
                    mensagem += " ganhando +2 de força por 3 turnos!";
                    break;

                default:
                    mensagem += "!";
            }

            jogador.getInventario().removerItem(item);
        }

        modelo.setMensagem(mensagem);
        atualizarTela();
    }

    public void descartarItem(Item item) {
        if (item == null || modelo == null) return;
        modelo.getJogador().getInventario().removerItem(item);
        modelo.setMensagem("Você descartou: " + item.getNome() + ".");
        atualizarTela();
    }

    public void executarTurnoCombate(SistemaCombate sistema, int tipoAtaque, TelaCombate telaCombate) {
        try {
            // Executar ataque do jogador
            String resultadoAtaque = sistema.jogadorAtacaComDetalhes(tipoAtaque);
            telaCombate.appendLog(resultadoAtaque);
            telaCombate.atualizarStatus();

            if (sistema.combateTerminado()) {
                // MOSTRAR ALERTA DE VITÓRIA
                mostrarAlertaVitoria(telaCombate);
                finalizarCombateVitoria(telaCombate);
                return;
            }

            // Delay de 1 segundo antes dos inimigos atacarem
            Thread.sleep(1000);
            
            // Inimigos atacam com delay entre cada um
            List<String> logs = sistema.inimigosAtacam();
            for (String log : logs) {
                telaCombate.appendLog(log);
                Thread.sleep(800); // Delay de 800ms entre cada ataque de inimigo
            }

            if (sistema.jogadorDerrotado()) {
                mostrarAlertaDerrota(telaCombate);
                finalizarCombateDerrota(telaCombate);
                return;
            }

            telaCombate.atualizarStatus();
            telaCombate.setMensagem("Sua vez: escolha a ação!");
            
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    // NOVO MÉTODO: Alerta de vitória
    private void mostrarAlertaVitoria(TelaCombate telaCombate) {
        StringBuilder mensagem = new StringBuilder("🎉 VOCÊ VENCEU!\n\n");

        for (Zumbi zumbi : modelo.getInimigosAtuais()) {
            if (!zumbi.estaVivo()) {
                mensagem.append("💀 ").append(zumbi.getNome()).append(" foi derrotado!\n");
            }
        }

        mensagem.append("\nRecuperando 20% de saúde pela vitória!");

        // Recuperar saúde após vitória
        modelo.getJogador().curar(modelo.getJogador().getSaudeMaxima() / 5);
        modelo.getJogador().atualizarSentimentoJogador(1); // Sentimento positivo pela vitória

        JOptionPane.showMessageDialog(telaCombate, mensagem.toString(), "Vitória!", JOptionPane.INFORMATION_MESSAGE);
    }

    private void mostrarAlertaDerrota(TelaCombate telaCombate) {
        JOptionPane.showMessageDialog(telaCombate,
                "💀 Você foi derrotado!\n\nSua jornada termina aqui...",
                "Derrota", JOptionPane.WARNING_MESSAGE);
        modelo.getJogador().atualizarSentimentoJogador(-1); // Sentimento negativo pela derrota
    }

    private void finalizarCombateVitoria(TelaCombate telaCombate) {
        telaCombate.setMensagem("Você derrotou todos os inimigos!");
        logsDiarios.add("Você derrotou todos os inimigos!");
        modelo.setEmCombate(false);
        
        // Desequipar arma e armadura e retornar ao inventário após a vitória
        desequiparItensAposCombate();

        // Incrementar explorações e avançar período após combate
        modelo.concluirExploracao();
        telaPrincipal.atualizarInterface();

        // Se for o evento final do dia 7, finalizar o jogo com vitória
        if (modelo.isEventoFinalAtivo()) {
            String msgVitoria = """
                    Dia 7 - Evento Final\n\n""" +
                    "Parabéns! Você sobreviveu por 7 dias e venceu o Boss.\n" +
                    "Você está seguro agora.";
            modelo.setMensagem(msgVitoria);
            logsDiarios.add(msgVitoria);
            modelo.setJogoTerminado(true);
            modelo.setJogoVencido(true);
            telaPrincipal.atualizarInterface();
            telaCombate.dispose();
            verificarFimJogo();
            return;
        }

        // Loot pós-combate (dias 1–6): vasculhar corpos para encontrar 1 item
        String lootMsg = null;
        if (modelo.getDiaAtual() <= 6) {
            Item loot;
            if (modelo.getDiaAtual() == 6) {
                // Dia 6: priorizar Granada como drop
                loot = new br.com.pedrodamasceno.model.itens.Item(
                        "Granada",
                        "Explosivo de uso único (30 de dano em área)",
                        br.com.pedrodamasceno.model.itens.TipoItem.EXPLOSIVO,
                        30
                );
                if (!modelo.getJogador().adicionarItem(loot)) {
                    loot = null; // inventário cheio
                }
            } else {
                loot = modelo.encontrarItem(false); // Passa false para loot pós-combate
            }

            if (loot != null) {
                lootMsg = "Você encontrou no corpo do zumbi: " + loot.getNome() + "!";
                logsDiarios.add(lootMsg);
            } else {
                lootMsg = "Você vasculhou os corpos, mas não encontrou nada útil.";
                logsDiarios.add(lootMsg);
            }
        }

        // Concluir a exploração do período após vencer o combate

        // Garantir que a mensagem de loot apareça antes das mensagens de avanço/conclusão
        if (lootMsg != null && !lootMsg.isEmpty()) {
            String apos = modelo.getMensagem() == null ? "" : modelo.getMensagem();
            modelo.setMensagem(lootMsg + (apos.isEmpty() ? "" : ("\n" + apos)));
        }
        
        telaPrincipal.atualizarInterface();
        telaCombate.dispose();
        
        // Verificar se o jogador morreu mesmo após a vitória
        verificarFimJogo();
    }

    private void finalizarCombateDerrota(TelaCombate telaCombate) {
        telaCombate.setMensagem("Você foi derrotado!");
        logsDiarios.add("Você foi derrotado!");
        modelo.setEmCombate(false);
        modelo.setInimigosAtuais(java.util.List.of());
        
        // Desequipar arma e armadura e retornar ao inventário após a derrota
        desequiparItensAposCombate();

        // Incrementar explorações e avançar período após combate
        modelo.concluirExploracao();
        telaPrincipal.atualizarInterface();

        // Marcar o jogo como terminado se o jogador morreu
        if (!modelo.getJogador().estaVivo()) {
            modelo.setJogoTerminado(true);
            logsDiarios.add("Fim de jogo: Você morreu.");
        }
        
        telaCombate.dispose();
        verificarFimJogo();
    }

    public void usarItemCombate(Item item, SistemaCombate sistema, TelaCombate tela) {
        if (item == null || sistema == null) return;

        String mensagem = processarUsoItemCombate(item);
        tela.appendLog(mensagem);
        logsDiarios.add(mensagem); // Adicionar uso de item em combate aos logs
        tela.atualizarStatus();
    }

    private String processarUsoItemCombate(Item item) {
        Personagem jogador = modelo.getJogador();
        String mensagem = "Usou " + item.getNome();

        switch (item.getTipo().name().toUpperCase()) {
            case "COMIDA":
                int cura = item.getValor();
                int saudeAntes = jogador.getSaude();
                jogador.curar(cura);
                int saudeDepois = jogador.getSaude();
                int curado = saudeDepois - saudeAntes;
                mensagem += " e recuperou " + curado + " de saúde!";
                // Se for RacaoCombate, aplicar seus efeitos adicionais
                if (item instanceof br.com.pedrodamasceno.model.itens.RacaoCombate racao) {
                    racao.consumir(jogador);
                    mensagem = racao.getNome() + " consumida. " + (curado > 0 ? "Recuperou " + curado + " HP e " : "") + "ganhou Força!";
                }
                jogador.getInventario().removerItem(item); // Remove a comida do inventário após uso
                break;
            case "MEDICAMENTO":
                int curaMed = item.getValor();
                int saudeAntesMed = jogador.getSaude();
                jogador.curar(curaMed);
                int saudeDepoisMed = jogador.getSaude();
                int curadoMed = saudeDepoisMed - saudeAntesMed;
                mensagem += " e recuperou " + curadoMed + " de saúde!";

                // Se for Antídoto, remover veneno
                if (item instanceof br.com.pedrodamasceno.model.itens.Antidoto antidoto) {
                    antidoto.usar(jogador);
                    mensagem = antidoto.getNome() + " usado. " + (curadoMed > 0 ? "Recuperou " + curadoMed + " HP e " : "") + "removeu veneno!";
                }
                // Se for Analgésico Forte, remover cansaço/medo
                else if (item instanceof br.com.pedrodamasceno.model.itens.AnalgesicoForte analgesico) {
                    analgesico.usar(jogador);
                    mensagem = analgesico.getNome() + " usado. " + (curadoMed > 0 ? "Recuperou " + curadoMed + " HP e " : "") + "removeu cansaço e medo!";
                }
                jogador.getInventario().removerItem(item); // Remove o medicamento do inventário após uso
                break;
            case "BUFF":
                // Manter lógica existente para buffs gerais
                jogador.adicionarEfeito(new StatusEffect(EfeitoStatus.FORCA, 3, 2));
                mensagem += " ganhando +2 de força por 3 turnos!";
                // Se for Lanterna Tática, aplicar buff de inteligência
                if (item instanceof br.com.pedrodamasceno.model.itens.LanternaTatica lanterna) {
                    lanterna.usar(jogador);
                    mensagem = lanterna.getNome() + " usada. Ganhou inteligência!";
                    jogador.getInventario().removerItem(item); // Remove a lanterna do inventário após uso
                } else {
                    jogador.getInventario().removerItem(item); // Remove outros buffs genéricos
                }
                break;
            case "EXPLOSIVO":
                // Para Isqueiro e Spray e Granada
                if (item instanceof br.com.pedrodamasceno.model.itens.IsqueiroESpray isqueiroESpray) {
                    aplicarDanoTodosInimigos(isqueiroESpray.getDanoBase());
                    mensagem += " e causou " + isqueiroESpray.getDanoBase() + " de dano em todos os inimigos!";
                } else { // Assume que é a Granada padrão
                    aplicarDanoTodosInimigos(item.getValor());
                    mensagem += " e causou " + item.getValor() + " de dano em todos os inimigos!";
                }
                jogador.getInventario().removerItem(item); // Remover o explosivo após o uso
                break;
            case "ARMADURA":
                if (item instanceof Armadura armadura) {
                    if (!armadura.estaQuebrada()) {
                        if (jogador.getArmaduraEquipada() != null) {
                            jogador.getInventario().adicionarItem(jogador.getArmaduraEquipada());
                        }
                        jogador.equiparArmadura(armadura);
                        mensagem = "Você equipou: " + armadura.getNome() + " (Defesa: " + armadura.getDefesa() + ") em combate!";
                        jogador.getInventario().removerItem(armadura);
                    } else {
                        mensagem = armadura.getNome() + " está quebrada e não pode ser equipada em combate.";
                    }
                }
                break;
            case "ARMA":
                if (item instanceof Arma arma) {
                    if (!arma.estaQuebrada() && (arma instanceof ArmaDeFogo armaDeFogo ? armaDeFogo.getMunicao() > 0 : true)) {
                        if (jogador.getArmaEquipada() != null) {
                            jogador.getInventario().adicionarItem(jogador.getArmaEquipada());
                        }
                        jogador.equiparArma(arma);
                        mensagem = "Você equipou: " + arma.getNome() + " (Dano: " + arma.getDano() + ") em combate!";
                        jogador.getInventario().removerItem(arma);
                    } else if (arma.estaQuebrada()) {
                        mensagem = arma.getNome() + " está quebrada e não pode ser equipada em combate.";
                    } else if (item instanceof ArmaDeFogo armaDeFogo && armaDeFogo.getMunicao() <= 0) {
                        mensagem = arma.getNome() + " está sem munição e não pode ser equipada em combate.";
                    }
                }
                break;
            case "MUNICAO":
                if (jogador.getArmaEquipada() instanceof ArmaDeFogo armaDeFogo) {
                    Municao municao = (Municao) item; // Cast para Municao
                    armaDeFogo.recarregar(municao.getValor());
                    mensagem = "Você recarregou o " + armaDeFogo.getNome() + " com " + municao.getValor() + " balas!";
                    jogador.getInventario().removerItem(municao); // Remove a munição do inventário após uso
                } else {
                    mensagem = "Você não tem uma arma de fogo equipada para usar munição.";
                }
                break;
            case "UTILIDADE":
                if (item instanceof Mapa) {
                    mensagem = "Você abriu o mapa. Ele mostra os caminhos da região. (Não pode ser usado em combate)";
                    // Não remove o mapa do inventário
                }
                else if (item instanceof br.com.pedrodamasceno.model.itens.LanternaTatica lanterna) {
                    lanterna.usar(jogador);
                    mensagem = lanterna.getNome() + " usada. Ganhou inteligência em combate!";
                    jogador.getInventario().removerItem(item); // Remove a lanterna do inventário após uso
                }
                else {
                    mensagem += "!"; // Mensagem padrão para outros itens de utilidade
                    jogador.getInventario().removerItem(item); // Remove item de utilidade genérico
                }
                break;
            default:
                mensagem += "!";
                jogador.getInventario().removerItem(item); // Remover item se não for tratado acima
        }

        // A lógica de remoção do item agora é tratada dentro de cada case ou no default para itens genéricos.
        // O Mapa, Armas, Armaduras e Munição (se usada para recarregar) não são removidos aqui globalmente.
        // O jogador.getInventario().removerItem(item); já está dentro dos blocos específicos onde o item é consumido ou equipado.
        // Removendo a linha de remoção global para evitar dupla remoção ou remoção indevida.
        // if (!item.getTipo().name().equalsIgnoreCase("MUNICAO") && !(item instanceof Mapa) && !(item instanceof Arma) && !(item instanceof Armadura)) {
        //     jogador.getInventario().removerItem(item);
        // }

        return mensagem;
    }

    private void aplicarDanoTodosInimigos(int dano) {
        for (Zumbi zumbi : modelo.getInimigosAtuais()) {
            if (zumbi.estaVivo()) {
                zumbi.receberDano(dano);
            }
        }
    }

    public void iniciarDiaFinal() {
        if (modelo.getDiaAtual() == 10 && !modelo.isEmCombate()) {
            int resposta = JOptionPane.showConfirmDialog(telaPrincipal,
                    """
                    Este é o décimo dia! O Zumbi Alfa aparecerá!\nDeseja enfrentá-lo agora?""",
                    "Dia Final", JOptionPane.YES_NO_OPTION);

            if (resposta == JOptionPane.YES_OPTION) {
                iniciarCombateZumbiAlfa();
            }
        }
    }

    // Dia 7 - Evento final
    private void iniciarEventoFinalDia7() {
        if (!modelo.isEmCombate() && modelo.isEventoFinalAtivo() && !modelo.isJogoTerminado()) {
            JOptionPane.showMessageDialog(telaPrincipal,
                    """
                    Dia 7 - Evento Final! O Boss final chegou. Prepare-se para a batalha!""",
                    "Evento Final", JOptionPane.INFORMATION_MESSAGE);
            iniciarCombateBossFinal();
            logsDiarios.add("EVENTO FINAL: O Boss final chegou! Prepare-se para a batalha!");
        }
    }

    private void iniciarCombateBossFinal() {
        br.com.pedrodamasceno.model.zumbis.BossFinal boss = new br.com.pedrodamasceno.model.zumbis.BossFinal();
        modelo.setInimigosAtuais(java.util.List.of(boss));
        modelo.setEmCombate(true);

        // Não é necessário instanciar SistemaCombate aqui, pois TelaCombate já faz isso.
        TelaCombate telaCombate = new TelaCombate(telaPrincipal, modelo, modelo.getInimigosAtuais());
        telaCombate.setLocationRelativeTo(telaPrincipal);
        telaCombate.setVisible(true);
    }

    private void iniciarCombateZumbiAlfa() {
        ZumbiAlfa zumbiAlfa = new ZumbiAlfa();
        modelo.setInimigosAtuais(List.of(zumbiAlfa));
        modelo.setEmCombate(true);

        // Não é necessário instanciar SistemaCombate aqui, pois TelaCombate já faz isso.
        TelaCombate telaCombate = new TelaCombate(telaPrincipal, modelo, modelo.getInimigosAtuais());
        telaCombate.setLocationRelativeTo(telaPrincipal);
        telaCombate.setVisible(true);
    }

    private void verificarFimJogo() {
        // Verificar se o jogador morreu
        if (modelo.getJogador() != null && !modelo.getJogador().estaVivo()) {
            modelo.setJogoTerminado(true);
            modelo.setMensagem("Você morreu! Fim de jogo.");
            exibirTelaGameOver(false, modelo.getJogador().getDiasSobrevividos());
            return;
        }
        
        if (modelo.isJogoTerminado() || modelo.isJogoVencido()) {
            boolean vitoria = modelo.isJogoVencido();
            int dias = vitoria && modelo.isEventoFinalAtivo() ? 7 : modelo.getJogador().getDiasSobrevividos();
            exibirTelaGameOver(vitoria, dias);
        }
    }

    private void exibirTelaGameOver(boolean vitoria, int dias) {
        TelaGameOver telaGameOver = new TelaGameOver(telaPrincipal, vitoria, dias);
        telaGameOver.setLocationRelativeTo(telaPrincipal);
        telaGameOver.setVisible(true);
    }

    private void mostrarMensagem(String mensagem) {
        JOptionPane.showMessageDialog(telaPrincipal, mensagem);
    }

    private void atualizarTela() {
        if (telaPrincipal != null) {
            telaPrincipal.atualizarInterface();
        }
    }

    private void desequiparItensAposCombate() {
        Personagem jogador = modelo.getJogador();
        // Desequipar arma, se houver
        if (jogador.getArmaEquipada() != null) {
            jogador.getInventario().adicionarItem(jogador.getArmaEquipada());
            jogador.desequiparArma();
        }
        // Desequipar armadura, se houver
        if (jogador.getArmaduraEquipada() != null) {
            jogador.getArmaduraEquipada().remover(jogador); // Remover efeitos de buff
            jogador.getInventario().adicionarItem(jogador.getArmaduraEquipada());
            jogador.desequiparArmadura();
        }
    }
}